#import libraries

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import scipy.stats as stats

# Load your time series data
df = pd.read_csv('C://Users//ADMIN//OneDrive//Desktop//EABL_STOCK_PRICE_CLEANED.csv')

#visualizing data

# Define columns to analyze
columns = ["Low", "High", "Open", "Close", "Volume"]
num_cols = len(columns)

# Set up figure for histograms and QQ plots
fig, axes = plt.subplots(nrows=num_cols, ncols=2, figsize=(12, num_cols * 4))
fig.suptitle("Histograms and Q-Q Plots for Stock Data", fontsize=16)

# Loop through each column to plot
for i, col in enumerate(columns):
    # Histogram
    sns.histplot(df[col], kde=True, ax=axes[i, 0], color="blue", bins=30)
    axes[i, 0].set_title(f"Histogram of {col}")
    axes[i, 0].set_ylabel("Frequency")
    axes[i, 0].grid(True)

    # Q-Q Plot
    stats.probplot(df[col].dropna(), dist="norm", plot=axes[i, 1])
    axes[i, 1].set_title(f"Q-Q Plot of {col}")

# Improve layout
plt.tight_layout(rect=[0, 0, 1, 0.96])
plt.show()

#statistical test for normality

#shapiro wilk
# Ensure all columns are numeric
df = df.apply(pd.to_numeric, errors='coerce')  # Convert non-numeric values to NaN

# Iterate over each numeric column and perform the Shapiro-Wilk test
for column in df.select_dtypes(include=['number']).columns:
    data = df[column].dropna()  # Drop NaNs before testing
    
    # Ensure there are at least 3 data points
    if len(data) < 3:
        print(f"Skipping '{column}' - Not enough data for Shapiro-Wilk test (requires ≥ 3 values).")
        continue
    
    stat, p_value = stats.shapiro(data)
    print(f"Shapiro-Wilk Test for '{column}': W={stat:.4f}, p-value={p_value:.4f}")
    
    # Interpretation of results
    if p_value < 0.05:
        print(f"The '{column}' data is NOT normally distributed (Reject H0).", end="\n")
    else:
        print(f"The '{column}' data is normally distributed (Fail to reject H0).")
#second statistical test
# Assuming df is your DataFrame
results = {}

# Iterate over each numerical column
for col in df.select_dtypes(include=['number']).columns:
    data = df[col].dropna()  # Remove NaN values

# Perform Kolmogorov-Smirnov test
ks_stat, p_value = stats.kstest(data, 'norm')
    
# Store the results
results[col] = {'KS Statistic': ks_stat, 'p-value': p_value}

# Display results
for col, res in results.items():
    print(f"{col}: KS Statistic = {res['KS Statistic']:.4f}, p-value = {res['p-value']:.4f}")
    if res['p-value'] < 0.05:
        print("Reject null hypothesis (Data is NOT normal)\n")
    else:
        print("Fail to reject null hypothesis (Data is normal)\n")

# Function to apply Box-Cox transformation
def boxcox_transform(df, columns):
    transformed_df = df.copy()
    lambdas = {}  # Store lambda values

    for col in columns:
        col_data = df[col].values  # Extract column data
        
        # Ensure all values are positive
        if (col_data <= 0).any():
            shift = abs(col_data.min()) + 1e-6  # Small shift to make all values > 0
            col_data = col_data + shift

        transformed, lambda_value = stats.boxcox(col_data)  # Apply Box-Cox
        transformed_df[col] = transformed
        lambdas[col] = lambda_value  # Store lambda value

        print(f"Box-Cox λ for {col}: {lambda_value:.4f}")

        # Plot original vs transformed data
        plt.figure(figsize=(10, 4))
        
        plt.subplot(1, 2, 1)
        sns.histplot(df[col], kde=True, bins=30, color="blue")
        plt.title(f"Original {col}")

        plt.subplot(1, 2, 2)
        sns.histplot(transformed_df[col], kde=True, bins=30, color="green")
        plt.title(f"Box-Cox Transformed {col}")

        plt.tight_layout()
        plt.show()
    
    return transformed_df, lambdas

# Apply Box-Cox transformation
columns_to_transform = ['Open', 'Close', 'Low', 'High', 'Volume']
df_transformed, lambda_values = boxcox_transform(df, columns_to_transform)
df, lambda_values = boxcox_transform(df, columns_to_transform)

# Define the file path where the CSV will be saved
file_path = "C:/Users/ADMIN/OneDrive/Desktop/Updated data.csv"  # Update with your desired path

# Save the transformed data as a CSV file
df_transformed.to_csv(file_path, index=False)

print(f"Transformed data saved successfully to: {file_path}")
